.. _intro:

はじめに
========

.. _intro-intro:

本チュートリアルの方針
----------------------

本稿は，いろいろな機械学習の手法を Python で実装してゆくことで， NumPy や SciPy など科学技術計算に関連したモジュールの，具体的な使用法を説明するチュートリアルです．

* 機械学習の手法についてはごく簡単な説明に留めますので，詳細は他の本を参考にして下さい．
* Python の基本的な文法については知っているものとします．

プログラム言語やライブラリの解説の多くは，背景にある概念の説明，ソフトウェアのコア部分の仕様，そして，拡張部分の仕様といった順に，その機能の説明が中心となっています．
このチュートリアルでは，これとは違うアプローチで Python を用いた数値計算プログラミングを説明します．
まず，数値計算プログラミングの中でも，機械学習 (Machine Learning) のアルゴリズム [#]_ について述べます．
そして，これらのアルゴリズムを実装する過程を通じて，その中で使われてきた各種のライブラリの機能について順次説明します．

今までのように概念や機能を中心とした説明は，ソフトウェアの機能を体系的に知るには良い方法です．
しかし，どう使うのかが分からないまま，多くの機能についての説明を読み続けるのは，やや忍耐を要します．
さらに，さまざまな機能を，どういう場面でどのように使うのかを具体的に知ることができるでしょう．

ただ一方で，このような方針では，網羅的にソフトウェアの機能を説明することは難しくなります．
NumPy や SciPy には，体系的なリファレンスマニュアルやサンプルが整備されています．また SciPy や EuroSciPy などの国際会議でも各種の優れたチュートリアルが公開されています．
日本でも Tokyo.Scipy というコミュニティがあります．
このチュートリアルを読んだあとでこれらを読むことで，体系的・網羅的に Python を用いた数値計算プログラミングについて知ることができるようになるでしょう．
今までのチュートリアル記事と，このチュートリアルは互いに補うような形になればと思います．

.. todo::
   NumPy / SiPy のチュートリアル情報に関するリンク集追加．
   付録にページを作って，そこを参照するようにする．

.. [#]
   著者の専門が機械学習なので対象として選びました．
   NumPy や SciPy が特に機械学習に適しているというわけではなく，数値計算プログラミング全般について使いやすい機能を提供しています．

.. _intro-note:

ソースコードに関する注意点
--------------------------

* 本稿のソースコードは :ref:`appendix-import` のようにモジュールが ``import`` されていることを前提としているので，参照してください．
* 本稿のコードは，ソフトウェアやモジュールのバージョンが付録 :ref:`appendix-version` のもので検証しました
