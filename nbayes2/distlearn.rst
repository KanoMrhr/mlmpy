.. _nbayes2-distlearn:

.. index:: broadcasting

分布の学習の実装
================

前節で説明したブロードキャストの機能を用いると， :obj:`for` ループを用いなくても，複数の要素に対する演算をまとめて行うことができます．
この節では，その方法を，単純ベイズの学習でのクラスや特徴の分布の計算の実装を通じて説明します．

.. _nbayes2-distlearn-classlearn:

クラス分布の学習
----------------

:ref:`nbayes2-fit2-fitif` 節で紹介した，クラス分布の計算の比較演算を用いた次の実装を，ブロードキャストの機能を用いて実装します．

.. code-block:: python

    nY = np.zeros(n_classes, dtype=np.int)
    for yi in xrange(n_classes):
        for i in xrange(n_samples):
            if y[i] == yi:
                nY[yi] += 1

書き換えの一般的な手順
^^^^^^^^^^^^^^^^^^^^^^

:obj:`for` ループによる実装をブロードキャストを用いて書き換える手順について，多くの人が利用している方針は見当たりません．
そこで，ここでは著者が採用している手順を紹介します．

1. 出力配列の次元数を :obj:`for` ループの数とする
2. 各 :obj:`for` ループのループ変数ごとに，出力配列の次元を割り当てる．
3. 各ループ変数に割り当てた次元の要素は，そのループ変数がループ中でとりうる全ての値であり，その他の次元の大きさは 1 であるような配列を :func:`np.arange` を用いて生成する．
4. 計算に必要な配列の生成する．
5. 冗長な配列を整理統合する．
6. 要素ごとの演算をユニバーサル関数の機能を用いて実行する．
7. :func:`np.sum` などの集約演算を適用して，最終結果を得る．

それでは，上記のコードを例として，これらの手順を具体的に説明します．

